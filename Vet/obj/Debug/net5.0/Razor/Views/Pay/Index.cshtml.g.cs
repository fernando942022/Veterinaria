#pragma checksum "C:\Users\FFernandez\source\repos\Vet\Vet\Views\Pay\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1f91a671ab76acddce5b5c6cbd402db5b2c75204"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Pay_Index), @"mvc.1.0.view", @"/Views/Pay/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\FFernandez\source\repos\Vet\Vet\Views\_ViewImports.cshtml"
using Vet;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\FFernandez\source\repos\Vet\Vet\Views\_ViewImports.cshtml"
using Vet.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1f91a671ab76acddce5b5c6cbd402db5b2c75204", @"/Views/Pay/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d857119458fb2584755616faf8d842a76bb13a32", @"/Views/_ViewImports.cshtml")]
    public class Views_Pay_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/pay.jpg"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("rounded"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n<div class=\"text-center\">\r\n    <h1 class=\"display-4\">Welcome</h1>\r\n    <p>Make your pay!!.</p>\r\n</div>\r\n<br />\r\n\r\n<div class=\"row col-10\">\r\n\r\n    <div class=\"col-4 bg-primary text-white border rounded\" >\r\n        <h5 id=\"titlePayment\"></h5>\r\n        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "1f91a671ab76acddce5b5c6cbd402db5b2c752044010", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
    </div>
    <div class=""col-8 border-top border-bottom border-right rounded"">
        <br />

        <div class=""form-group"">
            <label class=""control-label"">Payment Date</label>
            <div class=""col-lg-9"">
                <input type=""datetime-local"" class=""form-control"" id=""paymentdate""/>
            </div>
        </div>

        <div class=""form-group"">
            <label class=""control-label"">Total</label>
            <div class=""col-lg-9"">
                <input type=""number"" class=""form-control"" id=""amount""/>
            </div>
        </div>

        <div class=""form-group"">
            <label>Payment Type:</label><br />
            <input class=""form-check-input"" type=""radio"" name=""paymentType"" id=""cash"" value=""Cash"" checked, required=""required"" style=""margin-left:10px;"">
            <label class=""form-check-label"" for=""gridRadios1"" style=""margin-left:30px;"">
                Cash
            </label>
            <br />

            <input class=""form-ch");
            WriteLiteral(@"eck-input"" type=""radio"" name=""paymentType"" id=""feepayment"" value=""Fee payment"" checked, required=""required"" style=""margin-left:10px;"">
            <label class=""form-check-label"" for=""gridRadios1"" style=""margin-left:30px;"">
                Fee payment
            </label>
        </div>

        <button class=""btn btn-success"" id=""btnPay"">Pay</button><br />

    </div>
</div><br /><br />

<div id=""feePayment"">
    <table class=""table"" id=""tableQuota"">
        <tr>
            <th>Quota Date</th><th>Amount</th><th>Rest</th><th>Total</th>
        </tr>
    </table>
</div>

<div class=""container"">
    <!-- Modal -->
    <div class=""modal fade"" id=""quotaModal"" role=""dialog"" style=""width:60%"">
        <div class=""modal-dialog modal-lg"">

            <!-- Modal content-->
            <div class=""modal-content"">
                <div class=""modal-header bg-success text-white"" style=""padding:35px 50px;"" id=""modalTitle"">

                    <button type=""button"" class=""close"" data-dismiss=""");
            WriteLiteral(@"modal"" style=""text-align:right"">[X]</button>
                    <h5 class=""modal-title"" id=""modalTitle""></h5>

                </div>
                <div class=""modal-body"" style=""padding:40px 50px;"">

                    <div class=""form-group"">
                        <label class=""control-label"">Quota Date</label>
                        <div class=""col-lg-9"">
                            <input type=""datetime-local"" class=""form-control"" id=""quotadate"" />
                        </div>
                    </div>

                    <div class=""form-group col-lg-3"" id=""divtotal"">
                        <label class=""control-label"">Total</label>
                        <div>
                            <input type=""number"" class=""form-control"" id=""total"" />
                        </div>
                    </div>

                    <div class=""form-group col-lg-3"" id=""divamaunt"">
                        <label class=""control-label"">Amount</label>
                        <div>
   ");
            WriteLiteral(@"                         <input type=""number"" class=""form-control"" id=""quota"" />
                        </div>
                    </div>

                    <div class=""form-group col-lg-3"" id=""divrest"">
                        <label class=""control-label"">Rest</label>
                        <div>
                            <input type=""number"" class=""form-control"" id=""rest"" />
                        </div>
                    </div>

                    <br /><button type=""button"" class=""btn btn-primary"" data-dismiss=""modal"" style=""text-align:right"" id=""modalbtnSave"">Close</button>
                </div>

            </div>
        </div>
    </div>
</div>

");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script>
        var consultId;
        var payId;
        var existingPay = false;
        var payTitle;
        var statusPay;

        $(document).ready(function () {
            var dirUrl = $(location).attr('search').split(""="");
            consultId = parseInt(dirUrl[1]);
            alert(consultId);

            //Realizamos un ajax para obtener los datos de la consulta cuyo id viene en la url. Despues extraemos dichos datos para generar el rotulo del pago.
            $.ajax({
                url: """);
#nullable restore
#line 125 "C:\Users\FFernandez\source\repos\Vet\Vet\Views\Pay\Index.cshtml"
                 Write(Url.Action("Index", "Consult"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@""",
                data: { consultId },
                type: ""Post""
                }).done(function (result) {
                    // si el resultado de la consulta tiene registro se genera la lista
                    if (result != """") {
                        //alert(result[0][""petName""]);
                        payTitle = ""Vet-"" + result[0][""petName""] + ""-"" + consultId + ""-"" + result[0][""ownerName""];
                        $(""#titlePayment"").text(payTitle);

                    }
                    else {
                        alert(""Error. Fail"");

                    }

                });

            //Verificamos si la consulta tiene registro de pagos.
            fnverifyPay();

        });

        $(""#feepayment"").click(function () {
            $(""#quotadate"").attr(""value"", $(""#paymentdate"").val());
            $(""#total"").attr(""value"", $(""#amount"").val());
            $(""#quotaModal"").modal({ backdrop: false });
            $(""#modalTitle"").text(payTitle);

  ");
                WriteLiteral(@"      });

        $(""#btnPay"").click(function () {
            //alert();
            if ($(""input:radio[name=paymentType]:checked"").val() == ""Fee payment"") {
                //statusPay = ""Pending"";

                //Sino existe es porque es un pago nuevo que se hara la primera cuota
                if (!existingPay) {
                    fnPay();
                    fnQuota();
                }
                else {
                    fnQuota();
                }
            }

            if ($(""input:radio[name=paymentType]:checked"").val() == ""Cash"") {
                statusPay = ""Payed"";
                fnPay();
            }

        });

        $(""#modalbtnSave"").click(function () {
            //fngetdataQuota()
            //alert();
        });

        function fnverifyPay() {
            $.ajax({
                url: """);
#nullable restore
#line 185 "C:\Users\FFernandez\source\repos\Vet\Vet\Views\Pay\Index.cshtml"
                 Write(Url.Action("Index", "Pay"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@""",
                data: { consultId },
                type: ""Post""
                }).done(function (result) {
                    //
                    if (result != """") {
                        //alert(result[0][""paymentAmount""]);
                        payId = result[0][""payId""];
                        existingPay = true;
                        //alert(payId);
                        $(""#paymentdate"").attr(""value"", result[0][""paymentDate""]);
                        $(""#amount"").attr(""value"", result[0][""paymentAmount""]);
                        if (result[0][""paymentType""] == ""Cash"") {
                            $(""#cash"").attr(""checked"", true);
                        }
                        else {
                            $(""#feepayment"").attr(""checked"", true);
                        }

                        if (result[0][""status""] == ""Pending"") {

                            //Verificamos si el pago tiene cuotas
                            $.ajax({
                 ");
                WriteLiteral("               url: \"");
#nullable restore
#line 208 "C:\Users\FFernandez\source\repos\Vet\Vet\Views\Pay\Index.cshtml"
                                 Write(Url.Action("ListQuota", "Quota"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@""",
                                data: { payId },
                                type: ""Post""
                            }).done(function (result) {
                                 // si el resultado de la consulta tiene registro se genera la lista
                                if (result != """") {
                                    //alert(result);
                                    $.each(result, function (index, row) {
                                        $(""#tableQuota"").append(""<tr><td>"" + result[index][""quotaDate""] + ""</td><td>"" + result[index][""paymentAmount""] + ""</td><td>"" + result[index][""rest""] + ""</td><td>"" + result[index][""total""] + ""</td></tr>"");
                                    });
                                }

                            });

                        }
                        else {
                            $(""#btnPay"").text(""Payed"");
                            $(""#btnPay"").attr(""disabled"", true);
                            $(""#feepaymen");
                WriteLiteral(@"t"").attr(""disabled"", true);
                        }

                    }
                    else {
                        //Si no hay registro es porque es un pago nuevo.
                        statusPay = ""Pending"";

                    }

                });
        }

        function fnPay() {
            $.ajax({
                url: """);
#nullable restore
#line 241 "C:\Users\FFernandez\source\repos\Vet\Vet\Views\Pay\Index.cshtml"
                 Write(Url.Action("Add", "Pay"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@""",
                data: fngetdataPay(),
                type: ""Post""
                }).done(function (result) {
                    // si el resultado de la consulta tiene registro se genera la lista
                    if (result != """") {
                        alert(""pagando pay"");
                        payId = result[0][""payId""];
                        //return result;
                    }
                    else {
                        //return result;
                    }

                });
        }

        function fnQuota()
        {
            $.ajax({
                url: """);
#nullable restore
#line 261 "C:\Users\FFernandez\source\repos\Vet\Vet\Views\Pay\Index.cshtml"
                 Write(Url.Action("Add", "Quota"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@""",
                data: fngetdataQuota(),
                type: ""Post""
                }).done(function (result) {
                    // si el resultado de la consulta tiene registro se genera la lista
                    if (result != """") {
                        //Si el valor de rest es 0 editamos el atributo status de la tabla Pay y lo dejamos Payed
                        if ($(""#rest"").val() == 0) {
                            //alert(""Restante cero"");
                            $.ajax({
                                url: """);
#nullable restore
#line 271 "C:\Users\FFernandez\source\repos\Vet\Vet\Views\Pay\Index.cshtml"
                                 Write(Url.Action("EditStatus", "Pay"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@""",
                                data: { payId },
                                type: ""Post""
                            }).done(function (info) {
                                // si el resultado de la consulta tiene registro se genera la lista
                            });

                        }
                    }
                    else {
                        //return result;
                    }
                });

        }

        function fngetdataPay() {
            data = {
                ConsultId: consultId,
                PaymentDate: $(""#paymentdate"").val(),
                PaymentAmount: $(""#amount"").val(),
                PaymentType: $(""input:radio[name=paymentType]:checked"").val(),
                Status: statusPay //Cuando el cliente cancele la cantidad total a pagar, el atributo se cambiara a Payed
            }

            //alert(data[""PaymentType""] + "" <> "" + data[""Status""]);
            return data;
        }

        function fngetda");
                WriteLiteral(@"taQuota() {
            alert(payId);
            data = {
                PayId: payId,
                QuotaDate: $(""#quotadate"").val(),
                Total: $(""#total"").val(),
                PaymentAmount: $(""#quota"").val(),
                Rest: $(""#rest"").val()
            }

            return data;
        }


    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
